% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CodeAndRoll2.R
\name{apply2}
\alias{apply2}
\title{Apply Function Without Transposition Quirk (Row-Wise Apply Fix)}
\usage{
apply2(X, MARGIN, FUN, ...)
}
\arguments{
\item{X}{A matrix or array. Must be an object of class \code{array}. If \code{MARGIN = 1}, must be a
matrix. No default.}

\item{MARGIN}{A numeric vector giving the subscripts which the function will be applied over.
For a matrix: 1 indicates rows, 2 indicates columns. Default: no default; must be provided.}

\item{FUN}{The function to be applied. Default: no default; must be a valid function.}

\item{...}{Optional additional arguments passed to \code{FUN}.}
}
\value{
The result of applying \code{FUN} to \code{X} over the given \code{MARGIN}, with row-wise results
automatically transposed back into the expected orientation. The shape and type match
\code{apply()}, except when \code{MARGIN = 1} and the result is matrix-like, in which case the
transposition is corrected.
}
\description{
A drop-in replacement for \code{apply()} that automatically corrects the common transposition quirk
when applying functions row-wise (\code{MARGIN = 1}) to a 2D matrix. For \code{MARGIN = 1}, the result
is transposed back to match the expected orientation. For higher-dimensional arrays or
\code{MARGIN != 1}, it behaves identically to \code{apply()}.
}
\examples{
m <- matrix(1:9, nrow = 3, byrow = TRUE)
apply(m, 1, function(x) x + 1)        # Produces transposed output
apply2(m, 1, function(x) x + 1)       # Produces expected row-wise output

}
